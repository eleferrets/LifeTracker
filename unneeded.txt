CREATE TABLE posts (
  id          SERIAL PRIMARY KEY,
  caption    VARCHAR(140) NOT NULL,
  image_url      TEXT NOT NULL,
  user_id INTEGER NOT NULL,
  created_at  TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at   TIMESTAMP NOT NULL DEFAULT NOW(),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
)

CREATE TABLE ratings (
  -- Many to many relationship
  rating          INTEGER NOT NULL CHECK (rating > 0 AND rating <= 10),
  post_id    INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
  user_id    INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  created_at  TIMESTAMP NOT NULL DEFAULT NOW(),
  -- Primary keys must be unique, so we combine them
  PRIMARY KEY (post_id, user_id)
);

// import SideNav, { Toggle, Nav, NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
// import { faHome} from '@fortawesome/free-solid-svg-icons'
// // Be sure to include styles at some point, probably during your bootstraping
// import '@trendmicro/react-sidenav/dist/react-sidenav.css';
{/* <SideNav
    onSelect={(selected) => {
        // Add your code here
    }}
>
    <SideNav.Toggle />
    <SideNav.Nav defaultSelected="home">
        <NavItem eventKey="home" >
            <NavIcon>
            <FontAwesomeIcon icon={faHome} />
            </NavIcon>
            <NavText>
                Home
            </NavText>
        </NavItem>
        {/* <NavItem eventKey="charts">
            <NavIcon>
                <i className="fa fa-fw fa-line-chart" style={{ fontSize: '1.75em' }} />
            </NavIcon>
            <NavText>
                Charts
            </NavText>
            <NavItem eventKey="charts/linechart">
                <NavText>
                    Line Chart
                </NavText>
            </NavItem>
            <NavItem eventKey="charts/barchart">
                <NavText>
                    Bar Chart
                </NavText>
            </NavItem>
        </NavItem> }
    </SideNav.Nav>
</SideNav> */}

{/* <div className="notifications">
          <i className="material-icons md-36">notifications</i>
          <div className="green-dot" />
        </div>
        <div className="avatar">
          <img src={avatar} alt="avatar" />
          <div className="info">
            <p>Person McPerson</p>
            <span>ID: 12345567</span>
          </div>
        </div> */}
         {/*<div className="table">
        <div className="table-header table-row">
          <span className="col x4">Description</span>
          <span className="col x2">Category</span>
          <span className="col x2">Amount</span>
          <span className="col x15">Date</span>
        </div>
        {products.map((product) => (
          <div className="product-item" key={product.id}>
            <Link to={`/products/${product.id}`}>
              <span><img className="image" src={product.image}></img></span>
              <span className="content">
                <span className=""> {product.name} </span>
                 <span className="">
                
                
                {product.description}
                </span> 
              <div className="">{product.category.toUpperCase()}</div>
              <div className="">{"$"+product.price}</div>
              </span>
               <span className="col x15">{formatDate(product.postedAt)}</span>
            </Link>
          </div>
        ))}
      </div>

      <h2>Transfers</h2>
      <div className="table">
        <div className="table-header table-row">
          <span className="col x4">Memo</span>
          <span className="col x2">Recipient</span>
          <span className="col x2">Amount</span>
          <span className="col x15">Date</span>
        </div>
        {transfers.map((transfer) => (
          <div className="table-row" key={transfer.id}>
            <span className="col x4">
              <Arrow amount={transfer.amount} />
              {transfer.memo}
            </span>
            <span className="col x2">{transfer.recipientEmail}</span>
            <span className="col x2">{formatAmount(transfer.amount)}</span>
            <span className="col x15">{formatDate(transfer.postedAt)}</span>
          </div>
        ))}
      </div>
    </div>
  );
}
  const arrex = exercises
  if (arrex != undefined) {
  arrex.map((exercise) => (
    <div className="" key={exercise.id}>
      <span className="">
        {exercise.name}
      </span>
    </div>
  ))}
  // arrex.map()

const Arrow = ({ amount }) => {
  return (
    <svg
      width="22"
      height="21"
      viewBox="0 0 22 21"
      fill="none"
      className={`arrow ${amount < 0 ? "flip" : ""}`}
    >
      <path
        d="M5.8301 14.7583L16.1012 8.82833L15.1375 14.4192C15.0926 14.6809 15.1535 14.9498 15.3068 15.1666C15.4602 15.3834 15.6933 15.5304 15.9551 15.5753C16.2168 15.6202 16.4856 15.5593 16.7024 15.4059C16.9193 15.2526 17.0663 15.0194 17.1112 14.7577L18.4413 7.06156C18.4466 7.00341 18.4475 6.94495 18.4442 6.88665C18.4192 6.84335 18.4042 6.81737 18.4399 6.73907C18.4218 6.61711 18.3813 6.49954 18.3205 6.3923C18.258 6.286 18.1764 6.19217 18.0799 6.11553C18.0549 6.07223 18.0399 6.04625 17.9542 6.03795C17.9054 6.00593 17.8543 5.97755 17.8013 5.95304L10.4712 3.25689C10.3333 3.20614 10.1859 3.1864 10.0396 3.19905C9.89321 3.21171 9.75144 3.25646 9.62433 3.33012C9.42175 3.44655 9.26634 3.63024 9.18507 3.84931C9.13935 3.97264 9.11842 4.10378 9.12346 4.23521C9.1285 4.36665 9.15942 4.4958 9.21445 4.61527C9.26948 4.73473 9.34754 4.84217 9.44415 4.93142C9.54077 5.02068 9.65404 5.08999 9.77749 5.1354L15.1012 7.09628L4.8301 13.0263C4.60041 13.1589 4.43282 13.3773 4.36417 13.6335C4.29553 13.8897 4.33147 14.1626 4.46407 14.3923C4.59668 14.622 4.8151 14.7896 5.07128 14.8582C5.32746 14.9269 5.60041 14.8909 5.8301 14.7583Z"
        fill={amount < 0 ? "#FF0000" : "green"}
      />
    </svg>*/}
    .StoreActivity .table {
  display: flex;
  flex-wrap: wrap;
  column-gap: 1rem;
  row-gap: 1rem;
  width: 100%;
  /* border: 1px solid rgba(196, 196, 196, 0.3); */
}
.StoreActivity .product-item, .content {
  display: block;
  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  text-decoration: none;
  color: black;
  font-size: 1em;
  font-weight: bolder;
  word-wrap: break-word;
  max-width: 150px;
}
.StoreActivity .product-item .image {
  width: 150px;
  height: 150px;
  border-radius: 15px;
}
.StoreActivity .table .table-row {
  display: flex;
  flex-direction: row;
  height: 80px;
  width: 100%;
  border-bottom: 1px solid rgba(196, 196, 196, 0.3);
  background: white;
  transition: all 0.2s ease;
  cursor: pointer;
}
.StoreActivity .table .table-row:hover {
  background: #f3fffb;
}
.StoreActivity .table .table-row.table-header .col {
  background: rgba(44, 64, 71, 1);
  color: white;
}
.StoreActivity .table .table-row .col .arrow {
  margin-right: 10px;
  min-width: 20px;
}
.StoreActivity .table .table-row .col .arrow.flip {
  transform: rotate(180deg);
}

.StoreActivity .table .table-row .col {
  display: flex;
  flex-direction: row;
  align-items: center;
  height: 80px;
  padding: 25px;
  color: rgba(44, 65, 71, 1);
  font-weight: 600;
}
/* .StoreActivity .table .table-row .col.x1 {
  flex: 1;
}
.StoreActivity .table .table-row .col.x15 {
  flex: 1.5;
}
.StoreActivity .table .table-row .col.x2 {
  flex: 2;
}
.StoreActivity .table .table-row .col.x3 {
  flex: 3;
}
.StoreActivity .table .table-row .col.x4 {
  flex: 4;
} */

      {/* <AddProduct /> */}
      {/* {console.log("Hi",products)} */}

      //   try {
      //     // attaches data to res.data
      //     const res = await axios.get("http://localhost:3001/bank")
      //     const data = res.data
      //     // Optional chain operator for if statements
      //     // This is the same thing as if data, then set posts
      //     const posts = res?.data?.posts
      //   }
      //   catch(err) {
      //     console.log({err})
      //   }
      // }

      const express = require("express");
const Store = require("../models/store");
const router = express.Router();

// router.post("/", async (req, res, next) => {
//   try {
//     // Create a new post
//   } catch (err) {
//     next(err)
//   }
// })

router.get("/", async (req, res, next) => {
  try {
    // List all posts
    // call the listProducts from the Store model
    // and return the results as the products key of an object
  } catch (err) {
    next(err);
  }
});

// router.get("/:postId", async (req, res, next) => {
//     try {
//       // fetch single post
//     } catch (err) {
//       next(err)
//     }
//   })

//   router.put("/:postId", async (req, res, next) => {
//     try {
//       // Update a single post
//     } catch (err) {
//       next(err)
//     }
//   })

//   router.post("/:postId/ratings", async (req, res, next) => {
//     try {
//       // Create a rating for a post
//     } catch (err) {
//       next(err)
//     }
//   })

module.exports = router;
 // return all exercises that the authenticated user has created
    //console.log("Here")
    // const results = await db.query(
    //   `
    //         SELECT e.id AS "exerciseId",
    //         e.name AS "name",
    //     e.category AS "category",
    //         u.email AS "userEmail",
    //         e.duration AS "duration",
    //         e.intensity AS "intensity"
    //         FROM exercises AS e
    //         JOIN users AS u ON u.id = e.user_id
    //         `
    // );
        // check if user has added rating to this post
    // throw an error if they have
    // else insert the record into the db
    // const requiredFields = ["caption", "imageUrl"]
    // requiredFields.forEach(field => {
    //     if (!post.hasOwnProperty(field)) {
    //         throw new BadRequestError(`Required field - ${field} - missing from request body.`)
    //     }
    // })

    // if (post.caption.length > 140) {
    //     throw new BadRequestError(`Post caption must be 140 characters or less.`)
    // }
    // caption,
    //     image_url AS "imageUrl",
      // static async createOrder({rating, user, postId}) {
  //     // check if user has added rating to this post
  //     // throw an error if they have
  //     // else insert the record into the db
  // }
  /* const { post } = require("../routes/exercises"); */
  const db = require("../db");

class Store {
  static async listProducts() {
    // list all posts in db in descending order of when created
  }
  // static async fetchPostById(postId) {
  //     // fetch a single post
  // }
  // static async createNewPost({post, user}) {
  //     // create a new post
  // }
  // static async editPost({postId, postUpdate}) {
  //     // edit a single post
  // }
}

module.exports = Store;


import { formatAmount, formatDate } from "../../utils/format";
import "./ProductDetail.css" ;
import { useParams } from "react-router";
import { useEffect, useState } from "react";
import axios from "axios";
/*
 - Fragment tags as return only returns one thing<> </>*/
export default function ProductDetail() {
  const { productId } = useParams();
  const [isLoading, setIsLoading] = useState(false);
  const [product, setProduct] = useState([]);
  const [error, setError] = useState(false);
  useEffect(() => {
    const fetchProductById = async () => {
      setIsLoading(true);
      try {
        const res = await axios.get(
          `http://localhost:3001/store/products/${productId}`
        );
        //console.log(res)
        if (res?.data?.products) setProduct(res.data.products);
      } catch (err) {
        setError(err);
      }

      setIsLoading(false);
    };
    fetchProductById();
  }, [productId]);
  const renderProductContent = () => {
    if (isLoading) return <h1>Loading...</h1>;
    if (error) return <p className="description">No product found</p>;

    return (
      <>
      <p className="name">{product?.name}</p>
      <img className="image" src={product?.image} alt={"Gif of " + product?.name}></img>
        <p className="description">{product?.description}</p>
        <div className="meta">
          <p className={`price`}>
            {"$"+product?.price}
          </p>
          {/* <p className="date">{formatDate(product?.postedAt)}</p> */}
        </div>
      </>
    );
  };

  return (
    <div className="ProductDetail">
      <div className="card">
        <div className="title">
          <h3>Product #{productId}</h3>
          <p className="category">{product?.category}</p>
        </div>

        {renderProductContent()}
      </div>
    </div>
  );
}

.ProductDetail {
  min-height: 600px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.ProductDetail .card {
  border: 1px solid rgba(255, 196, 1, 0.3);
  background: #333;
  margin: 0 auto;
  padding: 28px;
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 400px;
  max-width: 600px;
  width: 100%;
}
.ProductDetail .card .title {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  color: white;
}
.ProductDetail .card .title h3 {
  font-size: 30px;
  color: white;
}
.ProductDetail .card .description {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  color: white;
}
.ProductDetail .card .image {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 150px;
  height: 200px;
  border-radius: 15px;
}
.ProductDetail .card .name {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: 26px;
  color: white;
}
.ProductDetail .card .meta {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  color: white;
}
.ProductDetail .card .price {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  background: rgba(44, 65, 71, 1);
  color: white;
}
.ProductDetail .card .price.minus {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  background: rgba(244, 65, 71, 1);
  color: white;
}

.ProductItem {
    height: 350px;
    width: 20em;
    /* max-width: 100vw; */
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    padding: 0 60px;
    background: #0b241b;
  }

  h1 {
    color: white;
  }
 
  .ProductItem .avatar img {
    height: 56px;
    width: 56px;
    border-radius: 50%;
    transform: translateY(1px) translateX(1px);
  }
  .ProductItem p {
    font-weight: 600;
    color: rgb(162, 250, 231);
  }
  .ProductItem h2 {
    font-weight: bolder;
    color: whitesmoke;
  }
  
  import { Link } from "react-router-dom";
import "./ProductItem.css";

export default function ProductItem() {
  return (
    <div className="ProductItem">
      <h2>Hello There!</h2>
      <h2>Find Your Groceries Here!</h2>
      <p>
        We have all kinds of groceries! Click on any of the items to learn more
        about each of them!
      </p>
    </div>
  );
}

// console.log(user)

// const {data, error} = await apiClient.listPosts()
// if (data) setPosts(data.posts)
// if (error) setError(error)
  // Every time the site or inside the array rendered
  // It will run only once as there is nothing in the array
  // Fetch products
  useEffect(() => {
    const fetchProducts = async () => {
      //   try {
      //     // attaches data to res.data
      //     const res = await axios.get("http://localhost:3001/bank")
      //     const data = res.data
      //     // Optional chain operator for if statements
      //     // This is the same thing as if data, then set posts
      //     const posts = res?.data?.posts
      //   }
      //   catch(err) {
      //     console.log({err})
      //   }
      // }

      setFetching(true);
      try {
        // const transferRes = await axios.get(
        //   "http://localhost:3001/bank/transfers"
        // );
        // //const transferData = transferRes.data;
        // const transfers = transferRes?.data?.transfers;
        // setTransfers(transfers);
        // const res = await axios.get(
        //   "http://localhost:3001/store/products"
        // );
       // const transactionData = res.data;
        // const products = res?.data?.products;
        //console.log(products)
        setProducts(products);
      } catch (err) {
        setError(err);
      }

      setFetching(false);
    };
    fetchProducts();
  }, []);

    const AddProduct = (newProduct) => {
    setProducts((t) => [...t, newProduct]);
  };
    const [products, setProducts] = useState([]);
      // const dashboard = isAuthenticated ? (
  //   <>
  //     <div className="home">

  //     </div>
  //   </>
  // ) : (
  //   <>

  //   </>
  // );
  
/* .Intro .avatar img {
    height: 56px;
    width: 56px;
    border-radius: 50%;
    transform: translateY(1px) translateX(1px);
  }
  .Intro p {
    font-weight: 600;
    color: rgb(162, 250, 231);
  } */
    /* padding: 0 60px; */
  /* background: #0b241b; */
    /* max-width: 100vw; */
              {/* <Route path="/details" element={<Dashboard user={user} />}></Route> */}
import AddProduct from "../AddProduct/AddProduct";
import Dashboard from "../Dashboard/Dashboard";
  //const [posts, setPosts] = useState([])
    // console.log("here",user)
     //console.log("logged out")
          {/* <Route
            path="/products/:productId"
            element={<ProductDetail />}
          ></Route> */}
                  {/* <Link to="/"></Link> */}
                  // import ProductDetail from "../ProductDetail/ProductDetail";



                  // console.log("here");
                      // console.log("here")
                         // console.log("there");
                             // console.log("there")
                              // console.log(user);
                              // console.log(user);
                              // console.log(user)
                              // console.log(user)
                              // console.log(user)
                              // console.log(user);
                              //  console.log(user)
                              //console.log(activities)
                               //   console.log(user)
                               //console.log(data.Activities)
       // console.log(data)
        // console.log("data",data)
        // data = {}
      // const {data:datal, error} = await apiClient.loginUser({email: form.email, password: form.password})
      //   setUser(data.user);
      //   apiClient.setToken(data.token);
          // try {
    //   const res = await axios.post("http://localhost:3001/auth/register", {
    //     first_name: form.firstName,
    //     username: form.userName,
    //     last_name: form.lastName,
    //     email: form.email,
    //     password: form.password,
    //   })
    //   if (res?.data?.user) {
    //     setUser(res.data.user)
    //   } else {
    //     setErrors((e) => ({ ...e, form: "Something went wrong with registration" }))
    //   }
    // } catch (err) {
    //   console.log(err)
    //   const message = err?.response?.data?.error?.message
    //   setErrors((e) => ({ ...e, form: message ?? String(err) }))
    // } finally {
    //   setIsProcessing(false)
    // }
        // try {
    //   const res = await axios.post("http://localhost:3001/auth/register", {
    //     first_name: form.firstName,
    //     username: form.userName,
    //     last_name: form.lastName,
    //     email: form.email,
    //     password: form.password,
    //   })
    //   if (res?.data?.user) {
    //     setUser(res.data.user)
    //   } else {
    //     setErrors((e) => ({ ...e, form: "Something went wrong with registration" }))
    //   }
    // } catch (err) {
    //   console.log(err)
    //   const message = err?.response?.data?.error?.message
    //   setErrors((e) => ({ ...e, form: message ?? String(err) }))
    // } finally {
    //   setIsProcessing(false)
    // }
          // data = {}
      // const {data:datal, error} = await apiClient.loginUser({email: form.email, password: form.password})
      //   setUser(data.user);
      //   apiClient.setToken(data.token);
        //   useEffect(() => {
  //     // if user is already logged in,
  //     // redirect them to the home page
  //     if (user?.email) {
  //       navigate("/");
  //     }
  // import "./Register.css";
  //   }, [user, navigate]);
      // try {
    //   const res = await axios.post("http://localhost:3001/auth/register", {
    //     first_name: form.firstName,
    //     username: form.userName,
    //     last_name: form.lastName,
    //     email: form.email,
    //     password: form.password,
    //   })
    //   if (res?.data?.user) {
    //     setUser(res.data.user)
    //   } else {
    //     setErrors((e) => ({ ...e, form: "Something went wrong with registration" }))
    //   }
    // } catch (err) {
    //   console.log(err)
    //   const message = err?.response?.data?.error?.message
    //   setErrors((e) => ({ ...e, form: message ?? String(err) }))
    // } finally {
    //   setIsProcessing(false)
    // }

          // data = {}
      // const {data:datal, error} = await apiClient.loginUser({email: form.email, password: form.password})
      //   setUser(data.user);
      //   apiClient.setToken(data.token);
        //   useEffect(() => {
  //     // if user is already logged in,
  //     // redirect them to the home page
  //     if (user?.email) {
  //       navigate("/");
  //     }
  //   }, [user, navigate]);
  // import "./Register.css";
      // try {
    //   const res = await axios.post("http://localhost:3001/auth/register", {
    //     first_name: form.firstName,
    //     username: form.userName,
    //     last_name: form.lastName,
    //     email: form.email,
    //     password: form.password,
    //   })
    //   if (res?.data?.user) {
    //     setUser(res.data.user)
    //   } else {
    //     setErrors((e) => ({ ...e, form: "Something went wrong with registration" }))
    //   }
    // } catch (err) {
    //   console.log(err)
    //   const message = err?.response?.data?.error?.message
    //   setErrors((e) => ({ ...e, form: message ?? String(err) }))
    // } finally {
    //   setIsProcessing(false)
    // }
          // data = {}
      // const {data:datal, error} = await apiClient.loginUser({email: form.email, password: form.password})
      //   setUser(data.user);
      //   apiClient.setToken(data.token);
        //   useEffect(() => {
  //     // if user is already logged in,
  //     // redirect them to the home page
  //     if (user?.email) {
  //       navigate("/");
  //     }
  //   }, [user, navigate]);
          //console.log(data.exercises)
          //   console.log(user)
          // import "./Banner.css";
              // try {
    //   const res = await axios.post("http://localhost:3001/auth/login", form)
    //   if (res?.data?.user) {
    //     setUser(res.data.user)
    //   } else {
    //     setErrors((e) => ({ ...e, form: "Invalid username/password combination" }))
    //   }
    // } catch (err) {
    //   console.log(err)
    //   setErrors((e) => ({ ...e, form: "Invalid username/password combination" }))
    // } finally {
    //   setIsProcessing(false)
    // }
      // const navigate = useNavigate()
  //  console.log(user)
    //  console.log(isAuthenticated)
          {/* <div className="search">
        <FilterInput
          filterInputValue={filterInputValue}
          handleOnInputChange={handleOnInputChange}
        />
      </div> */}
      {/* <div className="space"> </div> */}
          //   console.log(user)
          //console.log(data)
              // try {
    //   const res = await axios.post("http://localhost:3001/auth/register", {
    //     first_name: form.firstName,
    //     username: form.userName,
    //     last_name: form.lastName,
    //     email: form.email,
    //     password: form.password,
    //   })
    //   if (res?.data?.user) {
    //     setUser(res.data.user)
    //   } else {
    //     setErrors((e) => ({ ...e, form: "Something went wrong with registration" }))
    //   }
    // } catch (err) {
    //   console.log(err)
    //   const message = err?.response?.data?.error?.message
    //   setErrors((e) => ({ ...e, form: message ?? String(err) }))
    // } finally {
    //   setIsProcessing(false)
    // }
    // data = {}
      // const {data:datal, error} = await apiClient.loginUser({email: form.email, password: form.password})
              //console.log(data.Sleeps)
                      //   console.log(user)